# The sequence of triangle numbers is generated by adding the 
# natural numbers. So the 7th triangle number would be 
# 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have 
# over five divisors.
# What is the value of the first triangle number to have over 
# five hundred divisors?

def highly_divisible_triangular_number(number_to_be_over)
	triangle_number = 0
	number_to_add = 1
	found_number = false
	while found_number == false
		triangle_number += number_to_add
		number_to_add += 1
		if calculate_number_of_divisors(triangle_number) > number_to_be_over
			found_number = true
		end
	end
	return triangle_number
end

# Helper methods
def calculate_number_of_divisors(number)
	number_of_divisors = 0
	square_root = Math.sqrt(number).floor
	for i in 1..square_root
		if number % i == 0
			if i * i == number
				number_of_divisors += 1
			else
				number_of_divisors += 2
			end
		end
	end
	return number_of_divisors
end


example_first_to_number_of_divisors = 5
puts "Example Answer: #{highly_divisible_triangular_number(example_first_to_number_of_divisors)}"
start = Time.now
first_to_number_of_divisors = 500
puts "Answer: #{highly_divisible_triangular_number(first_to_number_of_divisors)}"
puts "Execution Time: #{Time.now - start}"
# Answer is 76576500